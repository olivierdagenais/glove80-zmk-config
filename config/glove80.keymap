/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behaviour includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define LAYER_EN 0
#define LAYER_FR 1
#define LAYER_Macros 2
#define LAYER_Game 3
#define LAYER_Nav 4

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        macro_to_0: to_0 {
            label = "to_layer_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(240, 100, 100) &to 0>;
        };

        macro_to_1: to_1 {
            label = "to_layer_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(0, 100, 100) &to 1>;
        };

        macro_to_2: to_2 {
            label = "to_layer_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(60, 100, 100) &to 2>;
        };

        macro_to_3: to_3 {
            label = "to_layer_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(120, 100, 100) &to 3>;
        };

        macro_to_4: to_4 {
            label = "to_layer_4";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(0, 0, 100) &to 4>;
        };
    };
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        to_1: to_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_1";
            bindings = <&macro_to_1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };
};

/* Automatically generated keymap */

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_EN {
            bindings = <
&kp F1     &kp F2    &kp F3         &kp F4        &kp F5                                                                                          &kp F6    &kp F7        &kp F8       &kp F9    &kp F10
&kp GRAVE  &kp N1    &kp N2         &kp N3        &kp N4    &kp N5                                                                        &kp N6  &kp N7    &kp N8        &kp N9       &kp N0    &kp MINUS
&kp TAB    &kp Q     &kp W          &kp E         &kp R     &kp T                                                                         &kp Y   &kp U     &kp I         &kp O        &kp P     &kp BSLH
&kp ESC    &kp A     &kp S          &kp D         &kp F     &kp G                                                                         &kp H   &kp J     &kp K         &kp L        &kp SEMI  &kp SQT
&kp LSHFT  &kp Z     &kp X          &kp C         &kp V     &kp B   &none      &kp DEL   &kp LA(LEFT)  &kp LA(RIGHT)  &kp INS  &none      &kp N   &kp M     &kp COMMA     &kp DOT      &kp FSLH  &kp RSHFT
&mo 2      &kp LBKT  &kp LS(COMMA)  &kp LS(LBKT)  &kp LPAR          &kp LCTRL  &kp LGUI  &kp LALT      &lt 4 K_APP    &kp RET  &kp SPACE          &kp RPAR  &kp LS(RBKT)  &kp LS(DOT)  &kp RBKT  &to_1 0 F12
            >;
        };

        layer_FR {
            bindings = <
&kp F1       &kp F2    &kp F3         &kp F4        &kp F5                                                                    &kp F6    &kp F7        &kp F8       &kp F9    &kp F10
&kp GRAVE    &kp N1    &kp N2         &kp N3        &kp N4    &kp N5                                                  &kp N6  &kp N7    &kp N8        &kp N9       &kp N0    &kp MINUS
&kp TAB      &kp Q     &kp W          &kp E         &kp R     &kp T                                                   &kp Y   &kp U     &kp I         &kp O        &kp P     &kp BSLH
&kp ESC      &kp A     &kp S          &kp D         &kp F     &kp G                                                   &kp H   &kp J     &kp K         &kp L        &kp SEMI  &kp SQT
&kp LSHFT    &kp Z     &kp X          &kp C         &kp V     &kp B   &trans  &trans  &trans  &trans  &trans  &trans  &kp N   &kp M     &kp COMMA     &kp DOT      &kp FSLH  &kp RSHFT
&macro_to_0  &kp LBKT  &kp LS(COMMA)  &kp LS(LBKT)  &kp LPAR          &trans  &trans  &trans  &trans  &trans  &trans          &kp RPAR  &kp LS(RBKT)  &kp LS(DOT)  &kp RBKT  &macro_to_2
            >;
        };

        layer_Macros {
            bindings = <
&bt BT_CLR       &none  &none  &none  &none                                                                        &none  &none  &none  &none  &bt BT_CLR_ALL
&none            &none  &none  &none  &none  &none                                                          &none  &none  &none  &none  &none  &none
&rgb_ug RGB_TOG  &none  &none  &none  &none  &none                                                          &none  &none  &none  &none  &none  &none
&bootloader      &none  &none  &none  &none  &none                                                          &none  &none  &none  &none  &none  &bootloader
&sys_reset       &none  &none  &none  &none  &none  &none  &none  &none         &none         &none  &none  &none  &none  &none  &none  &none  &sys_reset
&macro_to_1      &none  &none  &none  &none         &none  &none  &out OUT_USB  &lt 4 K_MENU  &none  &none         &none  &none  &none  &none  &macro_to_3
            >;
        };

        layer_Game {
            bindings = <
&kp F1       &kp F2    &kp F3         &kp F4        &kp F5                                                                                            &kp F6    &kp F7        &kp F8       &kp F9    &kp F10
&kp GRAVE    &kp N1    &kp N2         &kp N3        &kp N4    &kp N5                                                                          &kp N6  &kp N7    &kp N8        &kp N9       &kp N0    &kp MINUS
&kp TAB      &none     &kp Q          &kp W         &kp E     &kp R                                                                           &kp Y   &kp U     &kp I         &kp O        &kp P     &kp BSLH
&kp LCTRL    &kp ESC   &kp A          &kp S         &kp D     &kp RET                                                                         &kp H   &kp J     &kp K         &kp L        &kp SEMI  &kp SQT
&kp LSHFT    &none     &none          &none         &none     &none    &kp PG_UP  &kp PG_DN  &kp LA(LEFT)  &kp PG_UP     &kp LGUI  &kp RCTRL  &kp N   &kp M     &kp COMMA     &kp DOT      &kp FSLH  &kp RSHFT
&macro_to_2  &kp LBKT  &kp LS(COMMA)  &kp LS(LBKT)  &kp LPAR           &kp SPACE  &kp F12    &lt 0 F11     &lt 4 K_MENU  &kp RET   &kp SPACE          &kp RPAR  &kp LS(RBKT)  &kp LS(DOT)  &kp RBKT  &macro_to_4
            >;
        };

        layer_Nav {
            bindings = <
&to 0        &to 1        &kp K_PREV     &kp K_PP           &kp K_NEXT                                                                                                      &kp K_MUTE  &kp K_VOL_DN  &kp K_VOL_UP  &kp SLCK      &kp PAUSE_BREAK
&kp EQUAL    &kp F1       &kp F2         &kp F3             &kp F4           &kp F5                                                                            &kp F6       &kp F7      &kp F8        &kp F9        &kp F10       &kp F11
&kp LC(TAB)  &kp LA(F4)   &kp LC(F4)     &kp LG(C_AC_ZOOM)  &kp LC(LS(RET))  &kp LC(SPACE)                                                                     &kp LC(Y)    &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp LC(O)     &kp LC(LS(N1))
&kp ESC      &kp LG(F12)  &kp LC(S)      &kp DEL            &kp RET          &kp LG(N)                                                                         &kp KP_PLUS  &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp LC(SEMI)  &kp LS(SQT)
&kp LSHFT    &kp LC(Z)    &kp LC(X)      &kp LC(C)          &kp LS(INS)      &kp BSPC       &none      &none     &kp LA(K)  &kp LA(RIGHT)  &none    &none      &kp F12      &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp LC(DOT)   &kp RSHFT
&mo 3        &kp LBKT     &kp LS(COMMA)  &kp LS(LBKT)       &kp LPAR                        &kp LCTRL  &kp LGUI  &kp LALT   &lt 4 K_APP    &kp RET  &kp SPACE               &kp RPAR    &kp LS(RBKT)  &kp LS(DOT)   &kp RBKT      &macro_to_2
            >;
        };
    };
};
